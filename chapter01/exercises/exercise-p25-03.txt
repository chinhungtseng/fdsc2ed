Page 25 Exercise 03

Determine the space complexity of the iterative and recursive binomial 
coefficient functions created in Exercise 9, Sectino 1.3.

-------------------------------------------------------------------

double iterBinom(int n, int m)
{/* defined as n!/(m! - (n-m)!)*/
   int i;
   double nFact, mFact, nMinusMFact;
   if (n == m) return 1;
   if ((n==0) || (n == 1)) nFact = 1;
    else  {
	   nFact = 1;
       for (i = n; i > 1; i--)
           nFact *= i;
   }
   if  ((m==0) || (m == 1))  mFact = 1;
   else {
	   mFact = 1;
       for (i = m; i > 1; i--)
           mFact *= i;
   }
 if ( ((n-m) == 0) || ((n-m) == 1))  nMinusMFact = 1;
 else  {
	nMinusMFact = 1;
	for (i = n-m; i > 1; i--)
		nMinusMFact *= i;
 }
 return nFact/(mFact*nMinusMFact);
}

Because this function has only fixed space requirements, 
no variable space requirements, therefore, S_iterBinom(I) = 0

-------------------------------------------

double recurFact(int n)
{ /*recursive version */
  if ((n==0) || (n==1))  return 1.0;
  return n*recurFact(n-1);
}

double recurBinom(int n, int m)
{ /*recursive version */
  return recurFact(n)/(recurFact(m)*recurFact(n-m));
}

|-----------------------------------|--------|-----------------|
| Type                              | Name   | Number of bytes |
|-----------------------------------|--------|-----------------|
| parameter: (int)                  | n      | 4               |
| parameter: (int)                  | m      | 4               |
| parameter: (int)                  | n-m    | 4               |
|-----------------------------------|--------|-----------------|
| TOTAL per recursive call          |        | 12              |
|-----------------------------------|--------|-----------------|

space needed for one recursive is 12.
if n == MAX_SIZE, then S_recurBinom(I) = 12 * MAX_SIZE.
